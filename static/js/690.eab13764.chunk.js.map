{"version":3,"file":"static/js/690.eab13764.chunk.js","mappings":"oMACA,MCDwE,GAAgBA,iBDCnE,CACjBC,KAAM,qBACNC,QAAS,27BAOTC,YAAa,2WACbC,YAAa,0BACbC,IAAK,42BAYLC,QAAS,CACLC,QAAQ,EACRC,UAAW,2BACXC,MAAO,2GAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,yWAgBNC,MAAO,CAAC,CACRZ,KAAM,oBACNG,YAAa,sCACbU,gBAAiB,+DACjBC,U,eCtDSC,EAAW,CAAC,KAAO,qBAAqB,QAAU,QAAQ,gBAAe,EAAK,aAAa,sBAAsB,QAAU,CAAC,CAAC,KAAO,qBAAqB,QAAU,0DAA0D,YAAc,2WAA8E,YAAc,4B","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_use-refer-navigate';\nconst readmeConfig = {\n    name: `use-refer-navigate`,\n    summary: `<p><code>use-refer-navigate</code> 是一个基于 React 和 React Router 的实用 Hook，用于在页面导航时自动携带 <code>referer</code> 参数。该 Hook 可以简化在单页应用（SPA）中跟踪页面来源的需求，特别适用于需要记录用户跳转路径的场景。</p>\n<h3>核心功能</h3>\n<ul>\n<li>自动从当前 URL 的查询参数中提取 <code>referer</code> 值</li>\n<li>在导航到新页面时，自动将 <code>referer</code> 参数附加到目标 URL</li>\n<li>保持与 React Router <code>useNavigate</code> 相同的 API 接口，便于集成</li>\n</ul>`,\n    description: `用于在页面导航时自动携带 referer 参数。该 Hook 可以简化在单页应用（SPA）中跟踪页面来源的需求，特别适用于需要记录用户跳转路径的场景。`,\n    packageName: `@kne/use-refer-navigate`,\n    api: `<h3><code>useReferNavigate()</code></h3>\n<p>返回一个增强版的 <code>navigate</code> 函数，签名与 React Router 的 <code>useNavigate</code> 相同。</p>\n<p><strong>参数继承自 React Router:</strong></p>\n<ul>\n<li><code>to: string | number</code> - 目标路径或历史堆栈中的 delta</li>\n<li><code>options: { replace?: boolean, state?: any }</code> - 导航选项</li>\n</ul>\n<p><strong>特殊行为:</strong></p>\n<ul>\n<li>如果当前 URL 有 <code>referer</code> 参数，会自动附加到所有相对路径导航中</li>\n<li>绝对 URL 和数字导航（历史回退）不受影响</li>\n</ul>`,\n    example: {\n        isFull: false,\n        className: `use_refer_navigate_762b3`,\n        style: `.use_refer_navigate_762b3 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: useReferNavigate } = _UseReferNavigate;\n\nconst BaseExample = () => {\n  const navigate = useReferNavigate();\n\n  const handleClick = () => {\n    // 会自动携带 referer 参数\n    navigate('/target-page');\n  };\n\n  return <button onClick={handleClick}>Go to Target</button>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_UseReferNavigate\",\n    packageName: \"@kne/current-lib_use-refer-navigate\",\n    importStatement: \"import * as _UseReferNavigate from \\\"@kne/use-refer-navigate\\\"\",\n    component: component_1\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import UseReferNavigate from '@components/use-refer-navigate/README.md';export default {UseReferNavigate};\nexport const manifest = {\"name\":\"use-refer-navigate\",\"version\":\"1.0.0\",\"open-version\":true,\"public-url\":\"/use-refer-navigate\",\"modules\":[{\"name\":\"use-refer-navigate\",\"baseDir\":\"/home/runner/work/use-refer-navigate/use-refer-navigate\",\"description\":\"用于在页面导航时自动携带 referer 参数。该 Hook 可以简化在单页应用（SPA）中跟踪页面来源的需求，特别适用于需要记录用户跳转路径的场景。\",\"packageName\":\"@kne/use-refer-navigate\"}]};"],"names":["UseReferNavigate","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}